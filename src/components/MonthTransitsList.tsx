'use client';

import React, { MouseEvent, useRef } from 'react';

type AspectKey = 'conjunction' | 'sextile' | 'square' | 'trine' | 'opposition';

type TransitHit = {
  date: string;
  t_planet: string;
  n_point: string;
  aspect: AspectKey;
  orb: number;
  score: number;
};

type DayBucket = { date: string; items: TransitHit[] };

function symbolForAspect(a: AspectKey): string {
  switch (a) {
    case 'conjunction': return '☌';
    case 'sextile':     return '✶';
    case 'square':      return '□';
    case 'trine':       return '△';
    case 'opposition':  return '☍';
  }
}

function fmtGoogleStamp(iso: string) {
  const d = new Date(iso);
  const pad = (n: number) => String(n).padStart(2, '0');
  return (
    d.getUTCFullYear().toString() +
    pad(d.getUTCMonth() + 1) +
    pad(d.getUTCDate()) +
    'T' +
    pad(d.getUTCHours()) +
    pad(d.getUTCMinutes()) +
    pad(d.getUTCSeconds()) +
    'Z'
  );
}

export default function MonthTransitsList({
  ym,
  days,
}: {
  ym: string;
  days: DayBucket[];
}) {
  const scrollRef = useRef<HTMLDivElement>(null);

  const goToDay = (e: MouseEvent<HTMLAnchorElement>, date: string) => {
    e.preventDefault();
    const container = scrollRef.current;
    if (!container) return;
    const el = container.querySelector<HTMLElement>(`section[data-date="${date}"]`);
    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
  };

  return (
    <div className="rounded-2xl border p-4">
      {/* Indice "vai al giorno" compatto */}
      <nav className="mb-3 flex flex-wrap gap-2 text-xs">
        {days.map((d) => (
          <a
            key={d.date}
            href={`#${d.date}`}
            onClick={(e) => goToDay(e, d.date)}
            className="rounded-lg border px-2 py-1 hover:bg-gray-50"
            title={`Vai al ${d.date}`}
          >
            {d.date.slice(-2)}
          </a>
        ))}
      </nav>

      {/* Scroller interno che contiene TUTTI i transiti */}
      <div
        ref={scrollRef}
        className="h-[75vh] overflow-y-auto pr-2 space-y-5"
        aria-label={`Transiti di ${ym}`}
      >
        {days.map(({ date, items }) => (
          <section
            key={date}
            data-date={date}
            className="rounded-2xl border p-4 scroll-mt-24 bg-white"
          >
            <div className="mb-3 flex items-center justify-between">
              <h2 className="text-base font-semibold">{date}</h2>
              <a
                href={`#${date}`}
                onClick={(e) => goToDay(e, date)}
                className="text-xs text-gray-600 hover:underline"
              >
                Vai al giorno
              </a>
            </div>

            <ul className="space-y-3">
              {items.map((t, idx) => {
                const startISO = `${date}T09:00:00Z`; // orario placeholder
                const endISO = `${date}T10:00:00Z`;
                const gStart = fmtGoogleStamp(startISO);
                const gEnd = fmtGoogleStamp(endISO);

                const title = `${t.t_planet} ${t.aspect} ${t.n_point}`;
                const description = `Orb ${t.orb}°, score ${Math.round(
                  t.score
                )}. Generated by Natal + Transits + Chat (wellbeing/entertainment).`;

                const gcal = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(
                  title
                )}&dates=${gStart}/${gEnd}&details=${encodeURIComponent(description)}`;
                const ics = `/api/calendar/ics?title=${encodeURIComponent(
                  title
                )}&description=${encodeURIComponent(
                  description
                )}&start=${encodeURIComponent(startISO)}&duration=60`;

                return (
                  <li
                    key={`${date}-${t.t_planet}-${t.n_point}-${idx}`}
                    className="rounded-xl border p-3"
                  >
                    <div className="flex items-center justify-between">
                      <div className="font-medium">
                        {t.t_planet} {symbolForAspect(t.aspect)} {t.n_point}
                      </div>
                      <div className="text-xs text-gray-500">
                        orb {t.orb.toFixed(1)}° • score {Math.round(t.score)}
                      </div>
                    </div>

                    <div className="mt-2 flex items-center gap-2">
                      <a
                        href={gcal}
                        target="_blank"
                        rel="noreferrer"
                        className="rounded-lg border px-2 py-1 text-xs hover:bg-gray-50"
                      >
                        Google Calendar
                      </a>
                      <a
                        href={ics}
                        className="rounded-lg border px-2 py-1 text-xs hover:bg-gray-50"
                      >
                        Download .ics
                      </a>
                    </div>
                  </li>
                );
              })}
            </ul>
          </section>
        ))}
      </div>
    </div>
  );
}
